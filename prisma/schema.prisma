// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id       String @id @default(uuid())
  userId   String @unique
  name     String
  imageUrl String @db.Text
  email    String @db.Text

  servers  Server[]
  members  Member[]
  channels Channel[]
  files    File[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Server {
  id         String @id @default(uuid())
  name       String
  imageUrl   String @db.Text
  inviteCode String @unique

  profileID String
  profile   Profile @relation(fields: [profileID], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  members   Member[]
  channels  Channel[]
  files     File[]

  @@index([profileID])
}

enum MemberRole {
  ADMIN
  MODERATOR
  MEMBER
}

model Member {
  id   String     @id @default(uuid())
  role MemberRole @default(MEMBER)

  profileID String
  profile   Profile @relation(fields: [profileID], references: [id], onDelete: Cascade)

  // userId   String
  serverID String
  server   Server @relation(fields: [serverID], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileID])
  @@index([serverID])
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

model Channel {
  id   String      @id @default(uuid())
  name String
  type ChannelType @default(TEXT)

  profileID String
  profile   Profile @relation(fields: [profileID], references: [id], onDelete: Cascade)

  serverID String
  server   Server @relation(fields: [serverID], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  files     File[]

  @@index([serverID])
  @@index([profileID])
}

model File {
  id         String  @id @default(uuid())
  name       String
  size       Int
  mimeType   String
  url        String  @db.Text
  bucketName String
  path       String?

  // Optional: Associate files with users/profiles
  profileId String?
  profile   Profile? @relation(fields: [profileId], references: [id], onDelete: SetNull)

  // Optional: Associate files with servers/channels
  serverId String?
  server   Server? @relation(fields: [serverId], references: [id], onDelete: SetNull)

  channelId String?
  channel   Channel? @relation(fields: [channelId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([serverId])
  @@index([channelId])
}
